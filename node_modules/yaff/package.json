{
  "name": "yaff",
  "description": "Yet Another Flow Framework",
  "version": "0.0.18",
  "homepage": "https://github.com/mynameisdaniil/yaff",
  "author": {
    "name": "Daniil Sobol"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:mynameisdaniil/yaff.git"
  },
  "main": "main.js",
  "engines": {
    "node": ">=0.10"
  },
  "dependencies": {
    "maybe2": "0.1.4"
  },
  "devDependencies": {
    "jsdox": "0.2.2",
    "seq": "0.3.5"
  },
  "readme": "YAFF (Yet Another Flow Framework)\n=================================\n**Author:** Daniil Sobol\n\n**Overview:** This library is intended to replace unsupported and abandoned node-seq (https://github.com/substack/node-seq/). It tries to be as compatible as possible. But it doesn't copy some weird behaviour of original library. So, in some complex cases it can't be drop-in replacement and requires you to rewrite implementation-dependent code. This library is much more simple and optimised compared to original one. Piece of pure awesomeness, I'd say.\n\nYAFF is an asynchronous flow control library with a chainable interface for sequential and parallel actions. Even the error handling is chainable. Each action in the chain operates on a stack of values. Unlike Seq YAFF doesn't have variables hash and operates on plain old arguments stack only, if you need to modify something please use map/filter methods.\nExample:\n\n```javascript\nvar fs = require('fs');\nYAFF(['./'])\n  .seq(function (path) {\n    fs.readdir(path, this);\n  })\n  .flatten()\n  .parMap(function (file) {\n    fs.stat(__dirname + '/' + file, this);\n  })\n  .map(function (stat) {\n    return stat.size;\n  })\n  .unflatten()\n  .finally(function (e, sizes) {\n    log(sizes);\n  });\n```\n\n\nEach method executes callbacks with a context (its ```this```) described in the next section. Every method returns ```this```.\nWhenever ```this()``` is called with a non-falsy first argument, the error value propagates down to the ```finally``` block, skipping over all actions in between. There is an implicit ```finally``` at the end of all chains that just throws error away.\n.YAFF(initialStack=\\[\\])\n------------------------\nThe constructor function creates a new ```YAFF``` chain with the methods described below. The optional array argument becomes the new context stack.\n\n\n**Parameters**\n\n**initialStack=[]**:  *Array*,  Initial stack of arguments\n\n.seq(callback)\n--------------\nThis eponymous function executes actions sequentially. Once all running parallel actions are finished executing, the supplied callback is ```apply()```'d with the context stack.\nTo execute the next action in the chain, call ```this()```. The first argument must be the error value. The rest of the values will become the stack for the next action in the chain and are also available at ```this.args```.\n\n\n**Parameters**\n\n**callback**:  *function*,  Function to be executed sequentially\n\n.par(callback)\n--------------\nUse par to execute actions in parallel. Chain multiple parallel actions together and collect all the responses on the stack with a sequential operation like seq.\nEach par sets one element in the stack with the second argument to ```this()``` in the order in which it appears, so multiple pars can be chained together.\nLike with seq, the first argument to ```this()``` should be the error value and the second will get pushed to the stack.\n\n\n**Parameters**\n\n**callback**:  *function*,  Function to be executed in parallel\n\n.finally(callback)\n------------------\nFinalizes the chain. Handles errors as well as results and fires provided callback in nodejs manner, so first argument becomes error (may be ```undefined``` if everything is ok) and the rest arguments are results (may be ```undefined``` too if there is an error). ```finally``` is a syncronous sequential action. You can only have one ```finally``` block per chain and it should be in the very end of it.\n\nIt's handly if you use it inside asyncronous functions like that:\n```javascript\nvar myAsyncFunction = funtion(callback) {\nYAFF()\n.par(...)\n.par(...)\n.seq(...)\n.finally(callback)\n}\n```\n\n\n**Parameters**\n\n**callback**:  *function*,  Function to be executed at the very end of the chain\n\n",
  "readmeFilename": "README.md",
  "gitHead": "c286382d9e04d5a713c863ee81bde08d75d89c4f",
  "bugs": {
    "url": "https://github.com/mynameisdaniil/yaff/issues"
  },
  "_id": "yaff@0.0.18",
  "scripts": {},
  "_shasum": "8586b0168367982d86b6706877102917282b6e1b",
  "_from": "yaff@"
}
